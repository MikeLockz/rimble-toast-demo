{"version":3,"sources":["App.js","RimbleWeb3Transaction.js","serviceWorker.js","index.js"],"names":["App","React","Component","state","contract","account","value","error","transactionList","initContract","web3","Web3","window","currentProvider","console","log","eth","Contract","constant","inputs","name","outputs","payable","stateMutability","type","_this","setState","getAccounts","then","accounts","getNumber","_this$state","methods","getCounter","call","Number","toString","catch","resetCounter","contractMethodSendWrapper","incrementCounter","decrementCounter","addTransaction","incomingTransaction","transaction","lastUpdated","Date","now","Object","objectSpread","push","toastMeta","getTransactionToastMeta","toastProvider","addMessage","transactionToastMeta","status","transactionHash","message","actionHref","actionText","variant","icon","contractMethod","created","_this$state2","send","from","on","hash","confirmationNumber","receipt","this","react_default","a","createElement","className","index_es","my","width","mx","px","h1","fontSize","textAlign","mb","py","pt","borderTop","borderColor","justifyContent","size","onClick","mr","Container","ref","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.112bb0b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Card, Heading, Box, Button, OutlineButton, Text, Flex, ToastMessage } from 'rimble-ui'\nimport Web3 from 'web3' // uses latest 1.x.x version\nimport TransactionList from './TransactionList' // uses latest 1.x.x version\nimport RimbleWeb3Transaction from './RimbleWeb3Transaction'\n\nclass App extends Component {\n  state = {\n    contract: {},\n    account: {},\n    value: 0,\n    error: null,\n    transactionList: [],\n  }\n\n  initContract = () => {\n    // Instantiate provider (like metamask)\n    const web3 = new Web3(window.web3.currentProvider)\n\n    // // Address of the deployed smart contract (from etherscan)\n    const address = \"0x0f69f0ac4b92bf0d101b5747eed3fa6b653a36f8\"\n\n    // Copied from remix ide\n    var abi = [\n      {\n        \"constant\": false,\n        \"inputs\": [],\n        \"name\": \"decrementCounter\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      },\n      {\n        \"constant\": false,\n        \"inputs\": [],\n        \"name\": \"incrementCounter\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      },\n      {\n        \"constant\": false,\n        \"inputs\": [],\n        \"name\": \"reset\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"getCounter\",\n        \"outputs\": [\n          {\n            \"name\": \"\",\n            \"type\": \"int256\"\n          }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }\n    ];\n\n    console.log('creating contract')\n    const contract = new web3.eth.Contract(abi, address)\n    console.log(contract)\n    this.setState({ contract }, () => {\n      // Wait for setState to finish\n      web3.eth.getAccounts()\n        .then((accounts) => {\n          this.setState({ account: accounts[0] }, () => {\n            // Wait for setState to finish\n            console.log(this.state)\n\n            // Get initial number\n            this.getNumber()\n          })\n        })\n    })\n  }\n\n  // gets the number stored in smart contract storage\n  getNumber = () => {\n    const { contract, account } = this.state;\n    contract.methods.getCounter().call()\n      .then(value => {\n        value = Number(value.toString())\n        this.setState({ value })\n      })\n      .catch(error => {\n        this.setState({ error })\n      })\n  }\n\n  resetCounter = () => {\n    this.contractMethodSendWrapper('reset')\n  }\n  incrementCounter = () => {\n    this.contractMethodSendWrapper('incrementCounter')\n  }\n  decrementCounter = () => {\n    this.contractMethodSendWrapper('decrementCounter')\n  }\n\n  addTransaction = (incomingTransaction) => {\n    let transaction = {}\n    transaction.lastUpdated = Date.now()\n    transaction = {...transaction, ...incomingTransaction}\n\n    this.state.transactionList.push(transaction)\n    this.setState({\n      transactionList: this.state.transactionList\n    })\n\n    let toastMeta = this.getTransactionToastMeta(transaction)\n    window.toastProvider.addMessage('Not sure where this appears...', toastMeta)\n  }\n\n  getTransactionToastMeta = (transaction) => {\n    let transactionToastMeta = {}\n    let status = transaction.status\n    let transactionHash = transaction.transactionHash\n\n    switch (status) {\n      case 'started':\n        transactionToastMeta = {\n          message: 'Started a new transaction',\n          actionHref: '',\n          actionText: '',\n          variant: 'default',\n          icon: 'InfoOutline',\n        }\n        break;\n      case 'pending':\n        transactionToastMeta = {\n          message: 'Transaction is pending',\n          actionHref: '',\n          actionText: '',\n          variant: 'processing',\n        }\n        break;\n      case 'confirmed':\n        transactionToastMeta = {\n          message: 'Transaction is confirmed',\n          actionHref: 'https://rinkeby.etherscan.io/tx/' + transactionHash,\n          actionText: 'View on Etherscan',\n          variant: 'success',\n        }\n        break;\n      case 'success':\n        transactionToastMeta = {\n          message: 'Transaction completed successfully',\n          actionHref: 'https://rinkeby.etherscan.io/tx/' + transactionHash,\n          actionText: 'View on Etherscan',\n          variant: 'success',\n        }\n        break;\n      case 'error':\n        transactionToastMeta = {\n          message: 'Error',\n          actionHref: 'https://rinkeby.etherscan.io/tx/' + transactionHash,\n          actionText: 'View on Etherscan',\n          variant: 'failure',\n        }\n        break;\n      default:\n        break;\n    }\n    return transactionToastMeta\n  }\n\n  contractMethodSendWrapper = (contractMethod) => {\n    let transaction = {}\n    transaction.created = Date.now();\n    \n    // Show toast for starting transaction\n    console.log(\"Starting Transaction\");\n    transaction.status = 'started'\n    this.addTransaction(transaction)\n\n    const { contract, account } = this.state\n\n    contract.methods[contractMethod]().send({ from: account })\n      .on('transactionHash', (hash) => {\n        // Submitted to block and received transaction hash\n        console.log(\"Transaction sent to block successfully. Result pending.\");\n        transaction.status = 'pending'\n        this.addTransaction(transaction)\n      })\n      .on('confirmation', (confirmationNumber, receipt) => {\n        \n        // Somehow determine if this is an already confirmed tx?\n        if (confirmationNumber > 0) {\n          return;\n        }\n\n        console.log(\"receipt: \", receipt)\n        \n        // Update transaction with receipt details\n        transaction = { ...transaction, ...receipt }\n        \n        // Confirmed with receipt\n        console.log(\"Transaction confirmed.\");\n        transaction.status = \"confirmed\"\n        \n        this.addTransaction(transaction)\n\n        // check the status from result\n        if (receipt.status === true) {\n          console.log(\"Transaction completed successfully!\");\n          transaction.status = 'success'\n        } else if (receipt.status === false) {\n          console.log(\"Transaction reverted due to error.\");\n          transaction.status = 'error'\n        }\n\n        this.addTransaction(transaction)\n\n        \n      })\n      .on('receipt', (receipt) => {\n        // Received receipt\n        console.log(\"receipt: \", receipt);\n\n        // Update value\n        this.getNumber();\n      })\n      .on('error', (error) => {\n        // Errored out\n        console.log(error);\n      })\n  }\n\n  componentDidMount() {\n    this.initContract()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Box my={'auto'}>\n          <Card width={'400px'} mx={'auto'} px={4}>\n            <Heading.h1 fontSize={5} textAlign={'center'} px={4} mb={5}>Smart Contract Toast Example</Heading.h1>\n            <Box>\n              <Box py={4}>\n                <Text mb={2} fontSize={3}>\n                  Value from smart contract:\n                </Text>\n                <Text fontSize={6} textAlign={'center'}>{this.state.value}</Text>\n              </Box>\n\n              <Flex px={0} pt={4} borderTop={1} borderColor={'#E8E8E8'} justifyContent='space-between'>\n                {/* <OutlineButton size={'medium'} onClick={this.resetCounter} mr={4}>Reset</OutlineButton> */}\n                <OutlineButton size={'medium'} onClick={this.incrementCounter} mr={4}>Increment</OutlineButton>\n                <OutlineButton size={'medium'} onClick={this.decrementCounter}>Decrement</OutlineButton>\n              </Flex>\n              {/* <Flex mt={4} justifyContent='flex-end'>\n\n                <Button size={'medium'} onClick={this.getNumber}>Get Number</Button>\n              </Flex> */}\n            </Box>\n          </Card>\n\n          <Card width={'400px'} mx={'auto'} px={4}>\n            <Box>\n              <p>Instructions:</p>\n              <ul>\n                <li>Make sure MetaMask is working in your browser</li>\n                <li>Set the network to Rinkeby Test Network</li>\n                <li>You'll need a little bit of eth for gas fees</li>\n              </ul>\n              \n              <p>About</p>\n              <p>This is an example of a webapp that interacts with a Smart Contract. The demo uses Web3.js and Rimble UI Components to show the status of a Smart Contract transaction via toast messages. </p>\n\n            </Box>\n          </Card>\n\n          <ToastMessage.Container ref={(toastProvider) => { window.toastProvider = toastProvider }}>\n\n          </ToastMessage.Container>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nclass RimbleWeb3Transaction extends React.Component {\n  render() {\n    return (\n      <div>\n        Test\n      </div>\n    )\n  }\n}\n\nexport default RimbleWeb3Transaction","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}